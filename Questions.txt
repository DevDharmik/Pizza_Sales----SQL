Basic:
Q)>Retrieve the total number of orders placed.
A)>select count(order_id) as total_orders from orders;

Q)>Calculate the total revenue generated from pizza sales.
A)>select
   round(sum(orders_details.quantity * pizzas.price), 2) as total_sales
   from orders_details join pizzas
   on pizzas.pizza_id = orders_details.pizza_id;

Q)>Identify the highest-priced pizza.
A)>select pizza_types.name, pizzas.price
   from pizza_types join pizzas
   on pizza_types.pizza_type_id = pizzas.pizza_type_id
   order by pizzas.price desc limit 1;

Q)>Identify the most common pizza size ordered.
A)>select pizzas.size, count(order_details.order_details_id) as order_count
  from pizzas join order_details
  on pizzas.pizza_id = order_details.pizza_id
  group by pizzas.size order by order_count desc;

Q)>List the top 5 most ordered pizza types along with their quantities.
A)>select pizza_types.name, sum(order_details.quantity) as quantity
   from pizza_types join pizzas
   on pizza_types.pizza_type_id = pizzas.pizza_type_id
   join order_details
   on order_details.pizza_id = pizzas.pizza_id
   group by pizza_types.name order by quantity desc limit 5;

-----------------------------------------------------------------------------------------------------
Intermediate:
Q)>Join the necessary tables to find the total quantity of each pizza category ordered.
A)>select pizza_types.category, sum(order_details.quantity) as quantity
   from pizza_types join pizzas
   on pizza_types.pizza_type_id = pizzas.pizza_type_id
   join order_details
   on order_details.pizza_id = pizzas.pizza_id
   group by pizza_types.category order by quantity desc;

Q)>Determine the distribution of orders by hour of the day.
A)>select hour(order_time) as hour, count(order_id) as order_count 
   from orders
   group by hour(order_time)

Q)>Join relevant tables to find the category-wise distribution of pizzas.
A)>select category, count(name) from pizza_types
   group by category;

Q)>Group the orders by date and calculate the average number of pizzas ordered per day.
A)>select round(avg(quantity),0) as avg_pizza_ordered_per_day from
   (select orders.order_date, sum(order_details.quantity) as quantity
   from orders join order_details
   on orders.order_id = order_details.order_id
   group by orders.order_date) as order_quantity;

Q)>Determine the top 3 most ordered pizza types based on revenue.
A)>select pizza_types.name, 
   sum(order_details.quantity * pizzas.price) as revenue
   from pizza_types join pizzas
   on pizzas.pizza_type_id = pizza_types.pizza_type_id
   join order_details
   on order_details.pizza_id = pizzas.pizza_id
   group by pizza_types.name order by revenue desc limit 3;

--------------------------------------------------------------------------------------------------------
Advanced:
Q)>Calculate the percentage contribution of each pizza type to total revenue.
A)>SELECT pizza_types.category,
       ROUND(SUM(order_details.quantity * pizzas.price) /
       (SELECT SUM(order_details.quantity * pizzas.price) 
        FROM order_details 
        JOIN pizzas ON pizzas.pizza_id = order_details.pizza_id) * 100, 2) AS revenue_percentage
   FROM pizza_types
   JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
   JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
   GROUP BY pizza_types.category
   ORDER BY revenue_percentage DESC;

Q)>Analyze the cumulative revenue generated over time.
A)>select order_date,
   sum(revenue) over(order by order_date) as cum_revenue
   from
   (select orders.order_date,
   sum(order_details.quantity * pizzas.price) as revenue
   from order_details join pizzas
   on order_details.pizza_id = pizzas.pizza_id
   join orders
   on orders.order_id = order_details.order_id
   group by orders.order_date) as sales;

Q)>Determine the top 3 most ordered pizza types based on revenue for each pizza category.
A)>select name, revenue from
   (SELECT category,name, revenue,
       RANK() OVER (PARTITION BY category ORDER BY revenue DESC) AS rn
   FROM (
    SELECT pizza_types.category, pizza_types.name,
           SUM(order_details.quantity * pizzas.price) AS revenue
    FROM pizza_types
    JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
    JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
    GROUP BY pizza_types.category, pizza_types.name
   ) AS a) as b
   where rn <= 3;
